/**
 * Copyright [2016] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jpa.modeler.settings.code;

import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;

public final class CodePanel extends javax.swing.JPanel {

    private final CodeOptionsPanelController controller;

    CodePanel(CodeOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refractorNamedQueryComp = new javax.swing.JCheckBox();
        deleteNamedQueryComp = new javax.swing.JCheckBox();
        generateFluentAPIComp = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(refractorNamedQueryComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.refractorNamedQueryComp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(deleteNamedQueryComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.deleteNamedQueryComp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(generateFluentAPIComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.generateFluentAPIComp.text")); // NOI18N
        generateFluentAPIComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateFluentAPICompActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateFluentAPIComp)
                    .addComponent(deleteNamedQueryComp)
                    .addComponent(refractorNamedQueryComp))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refractorNamedQueryComp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteNamedQueryComp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateFluentAPIComp)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateFluentAPICompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateFluentAPICompActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateFluentAPICompActionPerformed

    void load() {
         refractorNamedQueryComp.setSelected(isRefractorQuery());
         deleteNamedQueryComp.setSelected(isDeleteQuery());
         generateFluentAPIComp.setSelected(isGenerateFluentAPI());
    }

    void store() {
       NbPreferences.forModule(CodePanel.class).putBoolean("refractorNamedQuery", refractorNamedQueryComp.isSelected());
       NbPreferences.forModule(CodePanel.class).putBoolean("deleteNamedQuery", deleteNamedQueryComp.isSelected());
       NbPreferences.forModule(CodePanel.class).putBoolean("generateFluentAPI", generateFluentAPIComp.isSelected());
       refractorNamedQuery=null;
       deleteNamedQuery=null;
       generateFluentAPI=null;
    }

    private static Boolean deleteNamedQuery;
    private static Boolean refractorNamedQuery;
    private static Boolean generateFluentAPI;
    
    public static boolean isRefractorQuery() {
        if (refractorNamedQuery == null) {
            refractorNamedQuery = pref.getBoolean("refractorNamedQuery", Boolean.TRUE);
        }
        return refractorNamedQuery;
    }
    
    public static boolean isGenerateFluentAPI() {
        if (generateFluentAPI == null) {
            generateFluentAPI = pref.getBoolean("generateFluentAPI", Boolean.FALSE);
        }
        return generateFluentAPI;
    }
    
    public static boolean isDeleteQuery(){
        if (deleteNamedQuery == null) {
            deleteNamedQuery = pref.getBoolean("deleteNamedQuery", Boolean.FALSE);
        }
        return deleteNamedQuery;
    }
    
    boolean valid() {
        return true;
    }
    
private static final Preferences pref = NbPreferences.forModule(CodePanel.class);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox deleteNamedQueryComp;
    private javax.swing.JCheckBox generateFluentAPIComp;
    private javax.swing.JCheckBox refractorNamedQueryComp;
    // End of variables declaration//GEN-END:variables
}
