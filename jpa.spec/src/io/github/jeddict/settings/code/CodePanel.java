/**
 * Copyright 2013-2018 the original author or authors from the Jeddict project (https://jeddict.github.io/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.github.jeddict.settings.code;

import java.util.prefs.Preferences;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import org.openide.util.NbPreferences;

public final class CodePanel extends javax.swing.JPanel {


    CodePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootLayeredPane = new javax.swing.JLayeredPane();
        refractorNamedQueryComp = new javax.swing.JCheckBox();
        deleteNamedQueryComp = new javax.swing.JCheckBox();
        javaseWrapperPanel1 = new javax.swing.JLayeredPane();
        generateFluentAPIComp = new javax.swing.JCheckBox();
        fluentAPIPrefixWrapperPanel = new javax.swing.JLayeredPane();
        fluentAPIPrefix_Label = new javax.swing.JLabel();
        fluentAPIPrefixComp = new javax.swing.JTextField();
        generateDefaultValueComp = new javax.swing.JCheckBox();
        javaseWrapperPanel = new javax.swing.JLayeredPane();
        javaseSupportLabel = new javax.swing.JLabel();
        javaseSupportComp = new javax.swing.JCheckBox();
        javaDocPanel = new javax.swing.JLayeredPane();
        javaDoc_Label = new javax.swing.JLabel();
        javadocSetting_LayeredPane = new javax.swing.JLayeredPane();
        propertyJavaDocComp = new javax.swing.JCheckBox();
        getterJavaDocComp = new javax.swing.JCheckBox();
        setterJavaDocComp = new javax.swing.JCheckBox();
        fluentAPIJavaDocComp = new javax.swing.JCheckBox();
        optionalReturnTypePanel = new javax.swing.JLayeredPane();
        optionalReturnTypeStatusLabel = new javax.swing.JLabel();
        optionalReturnTypeStatusComp = new javax.swing.JComboBox<>();
        compositePKWrapperPanel = new javax.swing.JLayeredPane();
        compositePrimaryKeyTypeLabel = new javax.swing.JLabel();
        defaultCompositePrimaryKeyTypeComp = new javax.swing.JComboBox<>();
        defaultSingleAssociationFetchTypeWrapperPanel = new javax.swing.JLayeredPane();
        defaultSingleAssociationFetchTypeLabel = new javax.swing.JLabel();
        defaultSingleAssociationFetchTypeComp = new javax.swing.JComboBox<>();

        rootLayeredPane.setLayout(new java.awt.GridLayout(9, 1, 0, 2));

        org.openide.awt.Mnemonics.setLocalizedText(refractorNamedQueryComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.refractorNamedQueryComp.text")); // NOI18N
        rootLayeredPane.add(refractorNamedQueryComp);

        org.openide.awt.Mnemonics.setLocalizedText(deleteNamedQueryComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.deleteNamedQueryComp.text")); // NOI18N
        rootLayeredPane.add(deleteNamedQueryComp);

        javaseWrapperPanel1.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(generateFluentAPIComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.generateFluentAPIComp.text")); // NOI18N
        javaseWrapperPanel1.add(generateFluentAPIComp, java.awt.BorderLayout.WEST);

        fluentAPIPrefixWrapperPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(fluentAPIPrefix_Label, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.fluentAPIPrefix_Label.text")); // NOI18N
        fluentAPIPrefixWrapperPanel.add(fluentAPIPrefix_Label);

        fluentAPIPrefixComp.setText(org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.fluentAPIPrefixComp.text")); // NOI18N
        fluentAPIPrefixComp.setPreferredSize(new java.awt.Dimension(120, 20));
        fluentAPIPrefixWrapperPanel.add(fluentAPIPrefixComp);

        javaseWrapperPanel1.add(fluentAPIPrefixWrapperPanel, java.awt.BorderLayout.CENTER);

        rootLayeredPane.add(javaseWrapperPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(generateDefaultValueComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.generateDefaultValueComp.text")); // NOI18N
        rootLayeredPane.add(generateDefaultValueComp);

        javaseSupportLabel.setForeground(new java.awt.Color(153, 153, 153));
        org.openide.awt.Mnemonics.setLocalizedText(javaseSupportLabel, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.javaseSupportLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(javaseSupportComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.javaseSupportComp.text")); // NOI18N

        javaseWrapperPanel.setLayer(javaseSupportLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        javaseWrapperPanel.setLayer(javaseSupportComp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout javaseWrapperPanelLayout = new javax.swing.GroupLayout(javaseWrapperPanel);
        javaseWrapperPanel.setLayout(javaseWrapperPanelLayout);
        javaseWrapperPanelLayout.setHorizontalGroup(
            javaseWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javaseWrapperPanelLayout.createSequentialGroup()
                .addComponent(javaseSupportComp, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(javaseSupportLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        javaseWrapperPanelLayout.setVerticalGroup(
            javaseWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javaseWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(javaseSupportLabel)
                .addComponent(javaseSupportComp))
        );

        rootLayeredPane.add(javaseWrapperPanel);

        javaDocPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(javaDoc_Label, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.javaDoc_Label.text")); // NOI18N
        javaDocPanel.add(javaDoc_Label, java.awt.BorderLayout.WEST);

        javadocSetting_LayeredPane.setPreferredSize(new java.awt.Dimension(253, 17));
        javadocSetting_LayeredPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 18, 0));

        propertyJavaDocComp.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(propertyJavaDocComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.propertyJavaDocComp.text")); // NOI18N
        javadocSetting_LayeredPane.add(propertyJavaDocComp);

        org.openide.awt.Mnemonics.setLocalizedText(getterJavaDocComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.getterJavaDocComp.text")); // NOI18N
        javadocSetting_LayeredPane.add(getterJavaDocComp);

        org.openide.awt.Mnemonics.setLocalizedText(setterJavaDocComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.setterJavaDocComp.text")); // NOI18N
        javadocSetting_LayeredPane.add(setterJavaDocComp);

        org.openide.awt.Mnemonics.setLocalizedText(fluentAPIJavaDocComp, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.fluentAPIJavaDocComp.text")); // NOI18N
        javadocSetting_LayeredPane.add(fluentAPIJavaDocComp);

        javaDocPanel.add(javadocSetting_LayeredPane, java.awt.BorderLayout.CENTER);

        rootLayeredPane.add(javaDocPanel);

        org.openide.awt.Mnemonics.setLocalizedText(optionalReturnTypeStatusLabel, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.optionalReturnTypeStatusLabel.text")); // NOI18N

        optionalReturnTypeStatusComp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disable", "Enable" }));

        optionalReturnTypePanel.setLayer(optionalReturnTypeStatusLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        optionalReturnTypePanel.setLayer(optionalReturnTypeStatusComp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout optionalReturnTypePanelLayout = new javax.swing.GroupLayout(optionalReturnTypePanel);
        optionalReturnTypePanel.setLayout(optionalReturnTypePanelLayout);
        optionalReturnTypePanelLayout.setHorizontalGroup(
            optionalReturnTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalReturnTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionalReturnTypeStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optionalReturnTypeStatusComp, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        optionalReturnTypePanelLayout.setVerticalGroup(
            optionalReturnTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalReturnTypePanelLayout.createSequentialGroup()
                .addGroup(optionalReturnTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optionalReturnTypeStatusLabel)
                    .addComponent(optionalReturnTypeStatusComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        rootLayeredPane.add(optionalReturnTypePanel);

        org.openide.awt.Mnemonics.setLocalizedText(compositePrimaryKeyTypeLabel, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.compositePrimaryKeyTypeLabel.text")); // NOI18N

        defaultCompositePrimaryKeyTypeComp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IdClass", "EmbeddedId" }));

        compositePKWrapperPanel.setLayer(compositePrimaryKeyTypeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        compositePKWrapperPanel.setLayer(defaultCompositePrimaryKeyTypeComp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout compositePKWrapperPanelLayout = new javax.swing.GroupLayout(compositePKWrapperPanel);
        compositePKWrapperPanel.setLayout(compositePKWrapperPanelLayout);
        compositePKWrapperPanelLayout.setHorizontalGroup(
            compositePKWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePKWrapperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compositePrimaryKeyTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defaultCompositePrimaryKeyTypeComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        compositePKWrapperPanelLayout.setVerticalGroup(
            compositePKWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePKWrapperPanelLayout.createSequentialGroup()
                .addGroup(compositePKWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compositePrimaryKeyTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultCompositePrimaryKeyTypeComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        rootLayeredPane.add(compositePKWrapperPanel);

        org.openide.awt.Mnemonics.setLocalizedText(defaultSingleAssociationFetchTypeLabel, org.openide.util.NbBundle.getMessage(CodePanel.class, "CodePanel.defaultSingleAssociationFetchTypeLabel.text")); // NOI18N

        defaultSingleAssociationFetchTypeComp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EAGER", "LAZY" }));

        defaultSingleAssociationFetchTypeWrapperPanel.setLayer(defaultSingleAssociationFetchTypeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        defaultSingleAssociationFetchTypeWrapperPanel.setLayer(defaultSingleAssociationFetchTypeComp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout defaultSingleAssociationFetchTypeWrapperPanelLayout = new javax.swing.GroupLayout(defaultSingleAssociationFetchTypeWrapperPanel);
        defaultSingleAssociationFetchTypeWrapperPanel.setLayout(defaultSingleAssociationFetchTypeWrapperPanelLayout);
        defaultSingleAssociationFetchTypeWrapperPanelLayout.setHorizontalGroup(
            defaultSingleAssociationFetchTypeWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultSingleAssociationFetchTypeWrapperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultSingleAssociationFetchTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defaultSingleAssociationFetchTypeComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        defaultSingleAssociationFetchTypeWrapperPanelLayout.setVerticalGroup(
            defaultSingleAssociationFetchTypeWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultSingleAssociationFetchTypeWrapperPanelLayout.createSequentialGroup()
                .addGroup(defaultSingleAssociationFetchTypeWrapperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultSingleAssociationFetchTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultSingleAssociationFetchTypeComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        rootLayeredPane.add(defaultSingleAssociationFetchTypeWrapperPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(rootLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 311, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(rootLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        refractorNamedQueryComp.setSelected(isRefractorQuery());
        deleteNamedQueryComp.setSelected(isDeleteQuery());
        propertyJavaDocComp.setSelected(isPropertyJavaDoc());
        getterJavaDocComp.setSelected(isGetterJavaDoc());
        setterJavaDocComp.setSelected(isSetterJavaDoc());
        fluentAPIJavaDocComp.setSelected(isFluentAPIJavaDoc());
        generateFluentAPIComp.setSelected(isGenerateFluentAPI());
        fluentAPIPrefixComp.setText(getFluentAPIPrefix());
        generateDefaultValueComp.setSelected(isGenerateDefaultValue());
        javaseSupportComp.setSelected(isJavaSESupportEnable());
        optionalReturnTypeStatusComp.setSelectedItem(isOptionalReturnType() ? "Enable" : "Disable");
        defaultCompositePrimaryKeyTypeComp.setSelectedItem(getDefaultCompositePrimaryKeyType());
       defaultSingleAssociationFetchTypeComp.setSelectedItem(getDefaultSingleAssociationFetchType());
    }

    void store() {
        pref.putBoolean("refractorNamedQuery", refractorNamedQueryComp.isSelected());
        pref.putBoolean("deleteNamedQuery", deleteNamedQueryComp.isSelected());
        pref.putBoolean("propertyJavaDoc", propertyJavaDocComp.isSelected());
        pref.putBoolean("getterJavaDoc", getterJavaDocComp.isSelected());
        pref.putBoolean("setterJavaDoc", setterJavaDocComp.isSelected());
        pref.putBoolean("fluentAPIJavaDoc", fluentAPIJavaDocComp.isSelected());
        pref.putBoolean("generateFluentAPI", generateFluentAPIComp.isSelected());
        pref.put("fluentAPIPrefix", fluentAPIPrefixComp.getText());
        pref.putBoolean("generateDefaultValue", generateDefaultValueComp.isSelected());
        pref.putBoolean("javaSESupportEnable", javaseSupportComp.isSelected());
        pref.putBoolean("optionalReturnType", "Enable".equals(optionalReturnTypeStatusComp.getSelectedItem()));
        pref.put("defaultCompositePrimaryKeyType", (String) defaultCompositePrimaryKeyTypeComp.getSelectedItem());
        pref.put("defaultSingleAssociationFetchType", (String) defaultSingleAssociationFetchTypeComp.getSelectedItem());
        deleteNamedQuery = null;
        refractorNamedQuery = null;
        propertyJavaDoc = null;
        getterJavaDoc = null;
        setterJavaDoc = null;
        fluentAPIJavaDoc = null;
        generateFluentAPI = null;
        fluentAPIPrefix = null;
        generateDefaultValue = null;
        javaSESupportEnable = null;
        optionalReturnTypeStatus = null;
        defaultCompositePrimaryKeyType = null;
        defaultSingleAssociationFetchType = null;
    }

    private static Boolean deleteNamedQuery;
    private static Boolean refractorNamedQuery;
    private static Boolean propertyJavaDoc;
    private static Boolean getterJavaDoc;
    private static Boolean setterJavaDoc;
    private static Boolean fluentAPIJavaDoc;
    private static Boolean generateFluentAPI;
    private static String fluentAPIPrefix;
    private static Boolean generateDefaultValue;
    private static Boolean javaSESupportEnable;
    private static Boolean optionalReturnTypeStatus;
    private static String defaultCompositePrimaryKeyType;
    private static String defaultSingleAssociationFetchType;

    public static boolean isRefractorQuery() {
        if (refractorNamedQuery == null) {
            refractorNamedQuery = pref.getBoolean("refractorNamedQuery", Boolean.TRUE);
        }
        return refractorNamedQuery;
    }

    public static boolean isGenerateFluentAPI() {
        if (generateFluentAPI == null) {
            generateFluentAPI = pref.getBoolean("generateFluentAPI", Boolean.FALSE);
        }
        return generateFluentAPI;
    }
    
    
    public static boolean isPropertyJavaDoc() {
        if (propertyJavaDoc == null) {
            propertyJavaDoc = pref.getBoolean("propertyJavaDoc", Boolean.TRUE);
        }
        return propertyJavaDoc;
    }

    public static boolean isGetterJavaDoc() {
        if (getterJavaDoc == null) {
            getterJavaDoc = pref.getBoolean("getterJavaDoc", Boolean.FALSE);
        }
        return getterJavaDoc;
    }

    public static boolean isSetterJavaDoc() {
        if (setterJavaDoc == null) {
            setterJavaDoc = pref.getBoolean("setterJavaDoc", Boolean.FALSE);
        }
        return setterJavaDoc;
    }
    
    public static boolean isFluentAPIJavaDoc() {
        if (fluentAPIJavaDoc == null) {
            fluentAPIJavaDoc = pref.getBoolean("fluentAPIJavaDoc", Boolean.FALSE);
        }
        return fluentAPIJavaDoc;
    }
    
    public static String getFluentAPIPrefix() {
        if (fluentAPIPrefix == null) {
            fluentAPIPrefix = pref.get("fluentAPIPrefix", EMPTY);
        }
        return fluentAPIPrefix;
    }

    public static boolean isGenerateDefaultValue() {
        if (generateDefaultValue == null) {
            generateDefaultValue = pref.getBoolean("generateDefaultValue", Boolean.FALSE);
        }
        return generateDefaultValue;
    }

    public static boolean isJavaSESupportEnable() {
        if (javaSESupportEnable == null) {
            javaSESupportEnable = pref.getBoolean("javaSESupportEnable", Boolean.FALSE);
        }
        return javaSESupportEnable;
    }

    public static boolean isOptionalReturnType() {
        if (optionalReturnTypeStatus == null) {
            optionalReturnTypeStatus = pref.getBoolean("optionalReturnType", Boolean.FALSE);
        }
        return optionalReturnTypeStatus;
    }

    public static boolean isDeleteQuery() {
        if (deleteNamedQuery == null) {
            deleteNamedQuery = pref.getBoolean("deleteNamedQuery", Boolean.FALSE);
        }
        return deleteNamedQuery;
    }

    public static String getDefaultCompositePrimaryKeyType() {
        if (defaultCompositePrimaryKeyType == null) {
            defaultCompositePrimaryKeyType = pref.get("defaultCompositePrimaryKeyType", "IdClass");
        }
        return defaultCompositePrimaryKeyType;
    }

    public static boolean isEmbeddedIdDefaultType() {
        return "EmbeddedId".equals(getDefaultCompositePrimaryKeyType());
    }
    
    public static String getDefaultSingleAssociationFetchType() {
        if (defaultSingleAssociationFetchType == null) {
            defaultSingleAssociationFetchType = pref.get("defaultSingleAssociationFetchType", "EAGER");
        }
        return defaultSingleAssociationFetchType;
    }

    public static boolean isLazyDefaultTypeForSingleAssociation() {
        return "LAZY".equals(getDefaultSingleAssociationFetchType());
    }

    public boolean valid() {
        return true;
    }

    private static final Preferences pref = NbPreferences.forModule(CodePanel.class);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane compositePKWrapperPanel;
    private javax.swing.JLabel compositePrimaryKeyTypeLabel;
    private javax.swing.JComboBox<String> defaultCompositePrimaryKeyTypeComp;
    private javax.swing.JComboBox<String> defaultSingleAssociationFetchTypeComp;
    private javax.swing.JLabel defaultSingleAssociationFetchTypeLabel;
    private javax.swing.JLayeredPane defaultSingleAssociationFetchTypeWrapperPanel;
    private javax.swing.JCheckBox deleteNamedQueryComp;
    private javax.swing.JCheckBox fluentAPIJavaDocComp;
    private javax.swing.JTextField fluentAPIPrefixComp;
    private javax.swing.JLayeredPane fluentAPIPrefixWrapperPanel;
    private javax.swing.JLabel fluentAPIPrefix_Label;
    private javax.swing.JCheckBox generateDefaultValueComp;
    private javax.swing.JCheckBox generateFluentAPIComp;
    private javax.swing.JCheckBox getterJavaDocComp;
    private javax.swing.JLayeredPane javaDocPanel;
    private javax.swing.JLabel javaDoc_Label;
    private javax.swing.JLayeredPane javadocSetting_LayeredPane;
    private javax.swing.JCheckBox javaseSupportComp;
    private javax.swing.JLabel javaseSupportLabel;
    private javax.swing.JLayeredPane javaseWrapperPanel;
    private javax.swing.JLayeredPane javaseWrapperPanel1;
    private javax.swing.JLayeredPane optionalReturnTypePanel;
    private javax.swing.JComboBox<String> optionalReturnTypeStatusComp;
    private javax.swing.JLabel optionalReturnTypeStatusLabel;
    private javax.swing.JCheckBox propertyJavaDocComp;
    private javax.swing.JCheckBox refractorNamedQueryComp;
    private javax.swing.JLayeredPane rootLayeredPane;
    private javax.swing.JCheckBox setterJavaDocComp;
    // End of variables declaration//GEN-END:variables
}
