//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 01:46:14 PM IST 
//
package io.github.jeddict.jpa.spec;

import java.util.ArrayList;
import java.util.List;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.type.DeclaredType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.eclipse.persistence.internal.jpa.metadata.converters.ConvertMetadata;
import org.eclipse.persistence.internal.jpa.metadata.converters.ConverterMetadata;
import static io.github.jeddict.jcode.jpa.JPAConstants.CONVERTS_FQN;
import static io.github.jeddict.jcode.jpa.JPAConstants.CONVERT_FQN;
import io.github.jeddict.jpa.spec.validator.ConvertValidator;
import io.github.jeddict.source.JavaSourceParserUtil;

/**
 *
 *
 * @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME) public @interface Convert
 * { Class converter() default void.class; String attributeName() default "";
 * boolean disableConversion() default false; }
 *
 *
 *
 * <p>
 * Java class for convert complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="convert">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="converter" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="attribute-name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="disable-conversion" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "convert", propOrder = {
    "description"
})
@XmlJavaTypeAdapter(value = ConvertValidator.class)
public class Convert implements Comparable<Convert> {

    protected String description;
    @XmlAttribute(name = "c")
    protected String converter;
    @XmlAttribute(name = "a")
    protected String attributeName;
    @XmlAttribute(name = "d")
    protected Boolean disableConversion;

    private static Convert loadConvert(AnnotationMirror annotationMirror, boolean mapKeyExist, boolean isMapKeyConvert) {
        Convert convert = null;
        if (annotationMirror != null) {
            convert = new Convert();
            DeclaredType declaredType = (DeclaredType) JavaSourceParserUtil.findAnnotationValue(annotationMirror, "converter");
            if (declaredType != null) {
                convert.converter = declaredType.toString();
            }
            convert.attributeName = (String) JavaSourceParserUtil.findAnnotationValue(annotationMirror, "attributeName");
            convert.disableConversion = (Boolean) JavaSourceParserUtil.findAnnotationValue(annotationMirror, "disableConversion");
            if (mapKeyExist) {
                if (isMapKeyConvert && (convert.attributeName == null || !convert.attributeName.startsWith("key"))) {
                    convert = null;
                } else if (!isMapKeyConvert && (convert.attributeName != null && convert.attributeName.startsWith("key"))) {
                    convert = null;
                }
            }
        }
        return convert;
    }

    public static List<Convert> load(Element element) {
        return load(element, false, false);
    }

    public static List<Convert> load(Element element, boolean mapKeyExist, boolean isMapKeyConvert) {
        List<Convert> converts = new ArrayList<>();

        AnnotationMirror convertsMirror = JavaSourceParserUtil.findAnnotation(element, CONVERTS_FQN);
        if (convertsMirror != null) {
            List convertsMirrorList = (List) JavaSourceParserUtil.findAnnotationValue(convertsMirror, "value");
            if (convertsMirrorList != null) {
                for (Object associationOverrideObj : convertsMirrorList) {
                    converts.add(Convert.loadConvert((AnnotationMirror) associationOverrideObj, mapKeyExist, isMapKeyConvert));
                }
            }
        } else {
            convertsMirror = JavaSourceParserUtil.findAnnotation(element, CONVERT_FQN);
            if (convertsMirror != null) {
                converts.add(Convert.loadConvert(convertsMirror, mapKeyExist, isMapKeyConvert));
            }
        }

        return converts;
    }

    /**
     * Gets the value of the description property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the converter property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getConverter() {
        return converter;
    }

    /**
     * Sets the value of the converter property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setConverter(String value) {
        this.converter = value;
    }

    /**
     * Gets the value of the attributeName property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getAttributeName() {
        return attributeName;
    }

    /**
     * Sets the value of the attributeName property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setAttributeName(String value) {
        this.attributeName = value;
    }

    /**
     * Gets the value of the disableConversion property.
     *
     * @return possible object is {@link Boolean }
     *
     */
    public Boolean isDisableConversion() {
        if (disableConversion == null) {
            return false;
        }
        return disableConversion;
    }

    /**
     * Sets the value of the disableConversion property.
     *
     * @param value allowed object is {@link Boolean }
     *
     */
    public void setDisableConversion(Boolean value) {
        this.disableConversion = value;
    }

    @Override
    public int compareTo(Convert convert) {
        if (this.attributeName == null) {
            return -1;
        }
        return this.attributeName.compareTo(convert.getAttributeName());
    }

    public ConvertMetadata getAccessor() {
        ConvertMetadata accessr = new ConvertMetadata();
        accessr.setConverterClassName(converter);
        accessr.setAttributeName(attributeName);
        accessr.setDisableConversion(disableConversion);
        return accessr;
    }
    
    public ConverterMetadata getConverterAccessor() {
        ConverterMetadata accessr = new ConverterMetadata();
        accessr.setClassName(converter);
        return accessr;
    }

}
